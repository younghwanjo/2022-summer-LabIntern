{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Automatic Differentiation with torch autograd.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyO64pSTAtT0d2hp864h4z0e"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":11,"metadata":{"id":"mKUg_cgDteej","executionInfo":{"status":"ok","timestamp":1656840951198,"user_tz":-540,"elapsed":277,"user":{"displayName":"조영환","userId":"09841441881075182066"}}},"outputs":[],"source":["%matplotlib inline"]},{"cell_type":"code","source":["import torch\n","\n","x = torch.ones(5)  # input tensor\n","y = torch.zeros(3)  # expected output\n","w = torch.randn(5, 3, requires_grad=True)\n","b = torch.randn(3, requires_grad=True)\n","z = torch.matmul(x, w)+b # matmul = dot product\n","loss = torch.nn.functional.binary_cross_entropy_with_logits(z, y)"],"metadata":{"id":"b50RtK2UK_Qp","executionInfo":{"status":"ok","timestamp":1656840951623,"user_tz":-540,"elapsed":5,"user":{"displayName":"조영환","userId":"09841441881075182066"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["print(f\"Gradient function for z = {z.grad_fn}\")\n","print(f\"Gradient function for loss = {loss.grad_fn}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qAJP5gNXLAPZ","executionInfo":{"status":"ok","timestamp":1656840951623,"user_tz":-540,"elapsed":5,"user":{"displayName":"조영환","userId":"09841441881075182066"}},"outputId":"392f71f6-53b6-488b-9c93-90aa6999ce58"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Gradient function for z = <AddBackward0 object at 0x7f32237258d0>\n","Gradient function for loss = <BinaryCrossEntropyWithLogitsBackward0 object at 0x7f32237256d0>\n"]}]},{"cell_type":"code","source":["loss.backward() # compute derivatives\n","print(w.grad)\n","print(b.grad)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ASzAtsXXLJem","executionInfo":{"status":"ok","timestamp":1656840951623,"user_tz":-540,"elapsed":4,"user":{"displayName":"조영환","userId":"09841441881075182066"}},"outputId":"ba391a98-7924-4f36-b55d-f7d4423ad954"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[0.3097, 0.0568, 0.3066],\n","        [0.3097, 0.0568, 0.3066],\n","        [0.3097, 0.0568, 0.3066],\n","        [0.3097, 0.0568, 0.3066],\n","        [0.3097, 0.0568, 0.3066]])\n","tensor([0.3097, 0.0568, 0.3066])\n"]}]},{"cell_type":"code","source":["z = torch.matmul(x, w)+b\n","print(z.requires_grad)\n","\n","with torch.no_grad():\n","    z = torch.matmul(x, w)+b\n","print(z.requires_grad)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mlkzVhq_LOjn","executionInfo":{"status":"ok","timestamp":1656840951623,"user_tz":-540,"elapsed":3,"user":{"displayName":"조영환","userId":"09841441881075182066"}},"outputId":"21d4d4f3-35bf-4cad-d472-a93a520b7eac"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","False\n"]}]},{"cell_type":"code","source":["z = torch.matmul(x, w)+b\n","z_det = z.detach()\n","print(z_det.requires_grad)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n5nagEOfrfEr","executionInfo":{"status":"ok","timestamp":1656840951623,"user_tz":-540,"elapsed":2,"user":{"displayName":"조영환","userId":"09841441881075182066"}},"outputId":"cc465e83-100e-4525-9a6e-f2d8a344fcc4"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["False\n"]}]},{"cell_type":"code","source":["inp = torch.eye(5, requires_grad=True)\n","out = (inp+1).pow(2)\n","print(out)\n","out.backward(torch.ones_like(inp), retain_graph=True)\n","print(f\"First call\\n{inp.grad}\")\n","out.backward(torch.ones_like(inp), retain_graph=True)\n","print(f\"\\nSecond call\\n{inp.grad}\")\n","inp.grad.zero_()\n","out.backward(torch.ones_like(inp), retain_graph=True)\n","print(f\"\\nCall after zeroing gradients\\n{inp.grad}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9lSzsDLQTuAL","executionInfo":{"status":"ok","timestamp":1656841139350,"user_tz":-540,"elapsed":284,"user":{"displayName":"조영환","userId":"09841441881075182066"}},"outputId":"6c850d68-7514-4c7b-f03c-ef3e9d25fb91"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[4., 1., 1., 1., 1.],\n","        [1., 4., 1., 1., 1.],\n","        [1., 1., 4., 1., 1.],\n","        [1., 1., 1., 4., 1.],\n","        [1., 1., 1., 1., 4.]], grad_fn=<PowBackward0>)\n","First call\n","tensor([[4., 2., 2., 2., 2.],\n","        [2., 4., 2., 2., 2.],\n","        [2., 2., 4., 2., 2.],\n","        [2., 2., 2., 4., 2.],\n","        [2., 2., 2., 2., 4.]])\n","\n","Second call\n","tensor([[8., 4., 4., 4., 4.],\n","        [4., 8., 4., 4., 4.],\n","        [4., 4., 8., 4., 4.],\n","        [4., 4., 4., 8., 4.],\n","        [4., 4., 4., 4., 8.]])\n","\n","Call after zeroing gradients\n","tensor([[4., 2., 2., 2., 2.],\n","        [2., 4., 2., 2., 2.],\n","        [2., 2., 4., 2., 2.],\n","        [2., 2., 2., 4., 2.],\n","        [2., 2., 2., 2., 4.]])\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"Hu03z2E5T5q8","executionInfo":{"status":"ok","timestamp":1656840951624,"user_tz":-540,"elapsed":2,"user":{"displayName":"조영환","userId":"09841441881075182066"}}},"execution_count":17,"outputs":[]}]}