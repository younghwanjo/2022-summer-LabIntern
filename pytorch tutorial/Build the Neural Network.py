{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Build the Neural Network.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMAF9UkNBK3SYjNgBONHziF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"ObxKwtSPPqsE","executionInfo":{"status":"ok","timestamp":1656569666128,"user_tz":-540,"elapsed":5132,"user":{"displayName":"조영환","userId":"09841441881075182066"}}},"outputs":[],"source":["import os\n","import torch\n","from torch import nn\n","from torch.utils.data import DataLoader\n","from torchvision import datasets, transforms"]},{"cell_type":"code","source":["device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","print(f\"Using {device} device\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OrYnEqHgPudg","executionInfo":{"status":"ok","timestamp":1656569667068,"user_tz":-540,"elapsed":4,"user":{"displayName":"조영환","userId":"09841441881075182066"}},"outputId":"76f293f5-2cd8-4113-b78d-ea36e67b85b4"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Using cpu device\n"]}]},{"cell_type":"code","source":["class NeuralNetwork(nn.Module):\n","    def __init__(self):\n","        super(NeuralNetwork, self).__init__()\n","        self.flatten = nn.Flatten()\n","        self.linear_relu_stack = nn.Sequential(\n","            nn.Linear(28*28, 512),\n","            nn.ReLU(),\n","            nn.Linear(512, 512),\n","            nn.ReLU(),\n","            nn.Linear(512, 10),\n","        )\n","\n","    def forward(self, x):\n","        x = self.flatten(x)\n","        logits = self.linear_relu_stack(x)\n","        return logits"],"metadata":{"id":"Uzk9kn9EPxjm","executionInfo":{"status":"ok","timestamp":1656569694307,"user_tz":-540,"elapsed":3,"user":{"displayName":"조영환","userId":"09841441881075182066"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["model = NeuralNetwork().to(device)\n","print(model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4cUFzS_GP4M9","executionInfo":{"status":"ok","timestamp":1656570030885,"user_tz":-540,"elapsed":7,"user":{"displayName":"조영환","userId":"09841441881075182066"}},"outputId":"bf7df671-61f9-4588-d36f-e45b0d1689b0"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["NeuralNetwork(\n","  (flatten): Flatten(start_dim=1, end_dim=-1)\n","  (linear_relu_stack): Sequential(\n","    (0): Linear(in_features=784, out_features=512, bias=True)\n","    (1): ReLU()\n","    (2): Linear(in_features=512, out_features=512, bias=True)\n","    (3): ReLU()\n","    (4): Linear(in_features=512, out_features=10, bias=True)\n","  )\n",")\n"]}]},{"cell_type":"code","source":["X = torch.rand(1, 28, 28, device=device)\n","logits = model(X)\n","pred_probab = nn.Softmax(dim=1)(logits)\n","y_pred = pred_probab.argmax(1)\n","print(f\"Predicted class: {y_pred}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0tm51iwlRKYq","executionInfo":{"status":"ok","timestamp":1656570049420,"user_tz":-540,"elapsed":3,"user":{"displayName":"조영환","userId":"09841441881075182066"}},"outputId":"1b7c62f8-d00d-493f-a5fc-e78e7fd4dd3c"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted class: tensor([6])\n"]}]},{"cell_type":"code","source":["input_image = torch.rand(3,28,28)\n","print(input_image.size())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GnbACiAkROpk","executionInfo":{"status":"ok","timestamp":1656570541309,"user_tz":-540,"elapsed":7,"user":{"displayName":"조영환","userId":"09841441881075182066"}},"outputId":"9a59cd7c-86cb-4890-994d-7a3539384d4c"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([3, 28, 28])\n"]}]},{"cell_type":"code","source":["flatten = nn.Flatten()\n","flat_image = flatten(input_image)\n","print(flat_image.size())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oy7vz0f1TG1n","executionInfo":{"status":"ok","timestamp":1656570547919,"user_tz":-540,"elapsed":2,"user":{"displayName":"조영환","userId":"09841441881075182066"}},"outputId":"04e3e76e-7b38-4168-8d27-385f336af29d"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([3, 784])\n"]}]},{"cell_type":"code","source":["layer1 = nn.Linear(in_features=28*28, out_features=20)\n","hidden1 = layer1(flat_image)\n","print(hidden1.size())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SemS5vxCTIou","executionInfo":{"status":"ok","timestamp":1656570554556,"user_tz":-540,"elapsed":2,"user":{"displayName":"조영환","userId":"09841441881075182066"}},"outputId":"cb9922c3-d8ac-4ec9-c8d3-8c4119cc726b"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([3, 20])\n"]}]},{"cell_type":"code","source":["print(f\"Before ReLU: {hidden1}\\n\\n\")\n","hidden1 = nn.ReLU()(hidden1)\n","print(f\"After ReLU: {hidden1}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"un57_ZEZTKO1","executionInfo":{"status":"ok","timestamp":1656570620183,"user_tz":-540,"elapsed":4,"user":{"displayName":"조영환","userId":"09841441881075182066"}},"outputId":"62b7a344-9612-4efa-85a4-ad6858208e3a"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Before ReLU: tensor([[0.0000, 0.0905, 0.0253, 0.3308, 0.0000, 0.0000, 0.2607, 0.0000, 0.0000,\n","         0.3820, 0.3664, 0.0000, 0.0000, 0.0000, 0.4293, 0.5047, 0.0000, 0.5256,\n","         0.1346, 0.0000],\n","        [0.0000, 0.0633, 0.0000, 0.5973, 0.0840, 0.0000, 0.3542, 0.0000, 0.0000,\n","         0.2939, 0.5630, 0.0000, 0.0000, 0.0000, 0.3171, 0.3874, 0.0000, 0.1814,\n","         0.0778, 0.0000],\n","        [0.0000, 0.2037, 0.0865, 0.1213, 0.0000, 0.0000, 0.4227, 0.0000, 0.0000,\n","         0.4531, 0.9387, 0.0000, 0.0000, 0.0000, 0.0200, 0.4035, 0.0000, 0.3502,\n","         0.0000, 0.0000]], grad_fn=<ReluBackward0>)\n","\n","\n","After ReLU: tensor([[0.0000, 0.0905, 0.0253, 0.3308, 0.0000, 0.0000, 0.2607, 0.0000, 0.0000,\n","         0.3820, 0.3664, 0.0000, 0.0000, 0.0000, 0.4293, 0.5047, 0.0000, 0.5256,\n","         0.1346, 0.0000],\n","        [0.0000, 0.0633, 0.0000, 0.5973, 0.0840, 0.0000, 0.3542, 0.0000, 0.0000,\n","         0.2939, 0.5630, 0.0000, 0.0000, 0.0000, 0.3171, 0.3874, 0.0000, 0.1814,\n","         0.0778, 0.0000],\n","        [0.0000, 0.2037, 0.0865, 0.1213, 0.0000, 0.0000, 0.4227, 0.0000, 0.0000,\n","         0.4531, 0.9387, 0.0000, 0.0000, 0.0000, 0.0200, 0.4035, 0.0000, 0.3502,\n","         0.0000, 0.0000]], grad_fn=<ReluBackward0>)\n"]}]},{"cell_type":"code","source":["seq_modules = nn.Sequential(\n","    flatten,\n","    layer1,\n","    nn.ReLU(),\n","    nn.Linear(20, 10)\n",")\n","input_image = torch.rand(3,28,28)\n","logits = seq_modules(input_image)\n","print(logits.size())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q1i8UTW0TPsP","executionInfo":{"status":"ok","timestamp":1656570695015,"user_tz":-540,"elapsed":4,"user":{"displayName":"조영환","userId":"09841441881075182066"}},"outputId":"0215dc16-82c9-41df-c460-863f95f77b18"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([3, 10])\n"]}]},{"cell_type":"code","source":["softmax = nn.Softmax(dim=1)\n","pred_probab = softmax(logits)\n","pred_probab"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NFdVLqf2Thxa","executionInfo":{"status":"ok","timestamp":1656570910129,"user_tz":-540,"elapsed":4,"user":{"displayName":"조영환","userId":"09841441881075182066"}},"outputId":"008c65a6-321d-427a-c9a4-989ca1881b7c"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[0.1061, 0.0740, 0.0975, 0.0861, 0.1355, 0.0922, 0.1036, 0.1258, 0.0875,\n","         0.0917],\n","        [0.1009, 0.0830, 0.1003, 0.0785, 0.1509, 0.0914, 0.1119, 0.1196, 0.0873,\n","         0.0762],\n","        [0.1134, 0.0737, 0.0974, 0.0818, 0.1378, 0.0969, 0.0961, 0.1258, 0.0909,\n","         0.0862]], grad_fn=<SoftmaxBackward0>)"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["print(f\"Model structure: {model}\\n\\n\")\n","\n","for name, param in model.named_parameters():\n","    print(f\"Layer: {name} | Size: {param.size()} | Values : {param[:2]} \\n\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qJdwjwwJTwF-","executionInfo":{"status":"ok","timestamp":1656570717499,"user_tz":-540,"elapsed":5,"user":{"displayName":"조영환","userId":"09841441881075182066"}},"outputId":"d38fed03-7f52-4306-e2cd-3772cc3741bf"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Model structure: NeuralNetwork(\n","  (flatten): Flatten(start_dim=1, end_dim=-1)\n","  (linear_relu_stack): Sequential(\n","    (0): Linear(in_features=784, out_features=512, bias=True)\n","    (1): ReLU()\n","    (2): Linear(in_features=512, out_features=512, bias=True)\n","    (3): ReLU()\n","    (4): Linear(in_features=512, out_features=10, bias=True)\n","  )\n",")\n","\n","\n","Layer: linear_relu_stack.0.weight | Size: torch.Size([512, 784]) | Values : tensor([[-0.0101, -0.0192, -0.0295,  ...,  0.0280, -0.0132,  0.0216],\n","        [ 0.0005,  0.0320, -0.0282,  ..., -0.0164,  0.0299, -0.0121]],\n","       grad_fn=<SliceBackward0>) \n","\n","Layer: linear_relu_stack.0.bias | Size: torch.Size([512]) | Values : tensor([ 0.0183, -0.0122], grad_fn=<SliceBackward0>) \n","\n","Layer: linear_relu_stack.2.weight | Size: torch.Size([512, 512]) | Values : tensor([[-0.0205, -0.0392, -0.0369,  ...,  0.0122,  0.0005,  0.0288],\n","        [ 0.0228,  0.0233, -0.0013,  ...,  0.0083, -0.0285,  0.0148]],\n","       grad_fn=<SliceBackward0>) \n","\n","Layer: linear_relu_stack.2.bias | Size: torch.Size([512]) | Values : tensor([ 0.0171, -0.0411], grad_fn=<SliceBackward0>) \n","\n","Layer: linear_relu_stack.4.weight | Size: torch.Size([10, 512]) | Values : tensor([[-0.0436,  0.0436, -0.0235,  ..., -0.0359,  0.0123,  0.0423],\n","        [ 0.0209,  0.0356,  0.0373,  ...,  0.0359,  0.0190,  0.0015]],\n","       grad_fn=<SliceBackward0>) \n","\n","Layer: linear_relu_stack.4.bias | Size: torch.Size([10]) | Values : tensor([-0.0426, -0.0331], grad_fn=<SliceBackward0>) \n","\n"]}]},{"cell_type":"code","source":["# layer는 activation function을 포함하는 개념인가? 아닌 것 같다"],"metadata":{"id":"IZw9ZzDwTyBT"},"execution_count":null,"outputs":[]}]}